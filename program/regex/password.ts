// (?=.*\d) : 先行断言+贪婪模式。匹配后面包含数字的字符。
// ^(?=.*\d)(?=.*[a-zA-Z]) ： 匹配后面既有数字又有字母的开始字符。
// 密码中同时含大写字母、小写字母、数字和特殊字符且长度在8-16之间
const re = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!#$%^&*])[\da-zA-Z!#$%^&*]{8,16}$/;
// (?![\d]+$)：正向否定查找。匹配向后直到结尾均为数字的字符。
// ：匹配向后直到结尾既不是纯数字，又不是纯消息字母，又不是纯大写字母的开始字符。
const re2 =/^(?![\d]+$)(?![a-z]+$)(?![A-Z]+$)/
// ^(\d+|[a-z]+|[A-Z]+)$：从头到尾要么是纯数字，要么是纯小写字母，要么是纯大写字母。

// ^(?!^(\d+|[a-z]+|[A-Z]+)$)：匹配向后直到结尾既不是纯数字，又不是纯消息字母，又不是纯大写字母的开始字符。

// 密码中允许出现数字、大写字母、小写字母、特殊字符（!#$%^&*），但至少包含其中2种且长度在8-16之间（四种符号任取其二或三）

const re1 =/^(?![\d]+$)(?![a-z]+$)(?![A-Z]+$)(?![!#$%^&*]+$)[\da-zA-z!#$%^&*]{8,16}$/

// 密码中允许出现数字、大写字母、小写字母、特殊字符（!#$%^&*），但至少包含其中3种且长度在8-16之间（四种符号任取其三）
// 正向否定方式：

const ree = /^(?![\da-z]+$)(?![\dA-Z]+$)(?![\d!#$%^&*]+$)(?![a-zA-Z]+$)(?![a-z!#$%^&*]+$)(?![A-Z!#$%^&*]+$)[\da-zA-z!#$%^&*]{8,16}$/
// 先行断言方式：

const ree1 = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[\da-zA-Z!#$%^&*]{8,16}$/
const ree2 = /^(?=.*\d)(?=.*[a-z])(?=.*[!#$%^&*])[\da-zA-Z!#$%^&*]{8,16}$/
const ree3 = /^(?=.*\d)(?=.*[A-Z])(?=.*[!#$%^&*])[\da-zA-Z!#$%^&*]{8,16}$/
const ree4 = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!#$%^&*])[\da-zA-Z!#$%^&*]{8,16}$/

// 数字 /\d/
// 字母 /[a-z]/
// 数字 /[A-Z]/
// 数字 /[^\da-zA-Z]/